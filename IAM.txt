//IAM
managing users
identity and access management => global service.
where you can add groups and users inside groups.
groups contains only users and not other groups.
user can belong to multiple groups.
not best practice to leave users out of a group but still an option.
we create users and groups to let users use our AWS
we manage permissions via IAM.
we need to give users permissions.
users and groups can be assigned JSON documents called IAM policies.
users can be in multiple groups
when ech group has a policy and users have multiple groups they will inherit the policies from each group they're in
do NOT give more permissions than a users actually needs.

IAM Policy structure (JSON)

consists of:
* version, policy language version
* ID, an identifier for the policy (optional)
* statement: one or more individual statements (required)

statement consists of
* Sid: id for the statement - optional
* effect - if the statement allows or denies access to certain API (allow, deny)
* principal: account/user/role to which this policy applies to
* Action: list of actions/APIs this policy allows or denies
* Recourse: list of recourses to which the actions applied to! - s3 bucket, which bucket and etc..
* condition - optional => condition for when this policy is in effect

MFA
multi factor authentication
you want to protect at least your root accounts and IAM users
to secure these accounts we'll: use MFA
MFA = password you know + security device you own
password + MFA generated token => successful login
even if a user has lost his password because it's stolen or hacked - the account will not be compromised since the hacker will
need to get a hold of the physical device such as the user's phone to do a login

1.MFA devices:
* virtual MFA device => google authenticator phone only
* Authy => multi device, support for multiple tokens on a single device
with a virtual MFA device you can have your root account and IAM user and another and another a many users as you want on the  virtual MFA device

there are more such as DUO mobile and etc..

2.UTF security key
* physical device third party such as USB yubikey - supports multiple root and IAM users.

3. hardware key fob

4. AWS govCloud - hardware device

//how can user access AWS?
3 options:
1. AWS management console (protected by password + MFA)
2. AWS CLI (protected by access keys) => access AWS from our terminal => alternative to AWS management console.
3. SDK software development kit for code (protected by access keys)

Access keys are generated through AWS console.
users can manage their own access keys.
access keys are secret - do not share them!

IAM roles:
some aws services will need to perform actions on our behalf on our account
we need to assign permissions to AWS services
to do that => we need to create via IAM role
these IAM roles will be just like a regular user but they are intended to be used not by physical people,
they will be used by AWS services
for example we might create an ec2 instance, this ec2 instance might want to use aws services on our behalf
in order for it to do that we need to provide it with permission by creating an IAM role for it and they're going to make
one entity.
once the ec2 tries to access some information from AWS then it will sue the IAM role
if the permission that is assigned to the IAM role is correct, then we are going to get access to the call that we are trying to make.

common roles:
* ec2 instance roles - allows the ec2 to perform actions against the role that I gave it by the policy permission that the role has
* lambda function roles
* roles for cloudformation

IAM security tools:
1. IAM credentials report (Account level)
report that lists of all my account's users and the status of their credentials
2. IAM access advisor (user-level)
show the service permissions granted to a user and when those services were last accessed, so we can see which permissions is not getting used
and we could remove that permission from that specific user in order to be inline with the principle of least privileges.

IAM guidelines && best practices:
dont use root account - except when you setup your aws account
one physical user = one AWS user => do not give your credentials if a friend wants to use AWS - INSTEAD CREATE ANOTHER USER TO THEM via IAM
assign users to groups and assign permission to groups to make sure that security is managed at the group level.
create a strong password policy
use and enforce the use of MFA to really guarantee security
create and use Roles for giving permissions to AWS services such as EC2 (virtual servers), Lambdas and cloudformation.
use access keys for programmatic access (CLI / SDK) - you must generate access keys;
Audit permissions of your account using IAM credentials report (list of all users with their credential status at account-level) and IAM access advisor (last access and use of services at user-level)

shared responsibility model for IAM
in IAM we are responsible for a lot things that aws will not do for me for example:
I am responsible for creating my own users, groups, roles, policies, management of policies and monitoring of that.
I am responsible for enabling MFA on all accounts and enforcing it, not AWS.
I am responsible to make sure keys are rotated often.
I am responsible to use IAM tools to apply appropriate permissions
I am responsible to analyze access patterns && review permissions.
in summary - AWS is responsible for all of the infrastructure but we are responsible for how we use that infrastructure.