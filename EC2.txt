//EC2

EC2 = elastic compute cloud = infrastructure as a service IaaS on AWS.
consists in the capability of:
1. renting VMs (EC2) => which are called EC2 instances => rent on demand whenever we need.
2. store data on visual drives EBS
3. distributing load across machines
4. scale services using ASG

knowing ec2 is fundamental to understand how the cloud works

EC2 sizing and config options:
* OS for EC2:
linux, windows or macOS
* how much compute power CPU and cores
* how much RAM
* how much storage space (volumes)
    network attached EBS or EFS
or hardware (EC2 instance store)
network card: speed of the card, public IP address
* firewall rules: security group
* bootstrap script (configure at first launch): ec2 user data

ec2 user data:
it is possible to bootstrap our instances using an ec2 user data script
bootstrapping means launching commands when a machine starts
that script is only run at the instance first start
ec2 user data is used to automate boot tasks such as:
1. installing updates
2. installing software
3. downloading common files from the internet
4. anything you can think of

** the EC2 user data runs with a root user

EC2 instance types - overview
7 different instance types
AWS has the following naming convention:
for example => m5.2xlarge
* m: instance class
* 5: generation of the instance (generation of hardware)
* 2xlarge: the size within the instance class, small, medium, large
the more the size - the more the memory the more the cpu which makes it faster

EC2 types:
1. general purposes => great for diversity of workloads such as web servers or code repositories
* good balance between compute, memory and networking
in the course - we'll be using t2.micro which is a general purpose EC2 instance (free tier)

2. compute optimized
* great for compute-intensive tasks that require high performance processors:
such as => batch processing workloads
media transcoding
high performance web servers
high performance computing HPC
machine learning
dedicated gaming servers

3. memory optimized
* fast performance for workloads that process large data sets in memory
such as:
* high performance RDB or non RDB
* distribute web scale cache stores
in memory DB => BI
applications performing real time processing of big unstructured data

4. storage optimized instances
* they are great when you are accessing a lot of data sets on the local storage
* great for storage-intensive tasks that require high, sequential read and write access to large data sets on local storage.
such as:
high frequency online transaction processing OLTP
Relational && noSQL DBs
cache for in memory DB such as Redis
data warehousing applications
distributed file systems

* Security groups
fundamental of network security in AWS
they control how traffic is allowed into or out of our EC2 instances
security groups only contain ALLOW rules - what is allowed to go in or to go out
security group rules can reference by IP addresses (where our computer is from) or by other security groups can reference each other
for example if we are on our computer and on the public internet and we are trying to access our EC2 instance from our computer
we are going to a create a security group around our ec2 instance that is the firewall that is around it
and this security group will have rules - what is allowed to go in or go out of our ec2 instance
and these rules are going to say whether or not some inbound traffic from the outside into the ec2 instance is allowed
and also if the ec2 instance can perform some outbound traffic to talk from where it is into the internet

* so security group are acting as a firewall on ec2 instances
* they regulate
    access to ports
    authorized ip ranges - ipv4 and ipv6 => these are the two kinds of IP on the internet
    control the inbound network (from X to the instance)
    control the outbound network (from instance to X )
when we display the security group in the console it will consist:
type: HTTP/SSH/Custom TCP
protocol: TCP
port range: 80, 22, 4567 and etc.. (the port allowing it - where the traffic can go through on the instance)
source - represents the IP address range and 0.0.0.0/0 means everything and if there are numbers 122.149.196 and etc.. this means just one IP

security group - good to know:
* they can be attached to multiple instances and vice versa (an instance can have multiple security groups)
* they are locked down to a region / VPC combination - meaning if we switch to another region we have to create a new security group
* the security groups live outside of the EC2 - if traffic is blocked - the ec2 instance wont see it (its a firewall outside of the ec2 instance)
* advice: it's good to maintain one separate security group for SSH access
* if the application is not accessible (time out) then it's a security group issue.
* if your application receives a "connection refused" error then it's an application error or it's not launched
* by default all inbound traffic is blocked
* by default all outbound traffic is authorized

classic ports to know:
* port 22 = SSH secure shell - this allows you to login to an EC2 instance on linux
* port 21 =  FTP (file transfer protocol) = upload files to a file share
* port 22 = SFTP (Secure file transfer protocol) - upload files using SSH, also using port 22, why ? because we are going to upload file but this
time using ssh because it's going to be a secure file transfer protocol
* port 80 = HTTP - to access unsecured websites
* 443 = HTTPS - to access secure websites
* 3389 - RDP (Remote desktop protocol) - this allows you to login to an EC2 instance on windows

SSH:
how to connect to our servers to perform some maintenance or action  using SSH
SSH summary table
1. Mac
2. Linux
3. windows < 10
4. windows >= 10

SSH => the ssh is a command line interface utility that can be used on macOS and linux as well as windows over version 10
Putty  windows < 10 + windows >= 10  => 10 use putty to use ssh protocol to connect to the ec2 instance
EC2 instance connect => going to use your web browser and not a terminal to connect to your EC2 instance and can be used on all mentioned OS
(LINUX MAC WINDOWS) so it is valid for them all
EC2 instance connect only works for Amazon NX2

what is SSH

SSH is one of the most important functions, it allows you to control a remote machine or server, all using the command line or terminal
for example if we have an EC2 machine linux public IP that has a security group rule on port 22 which uses of type SSH
so what's going to happen is at our computer we'll access over the web through that port 22 - it will access the ec2 machine
so basically our command line interface is going to be just as if we are inside that machine

how to SSH on linux =>
copy the pem folder that you downloaded as key value pair when creating the instance
cd to the path of the folder
run the command ssh ec2-user@IP(that you have - public IP for our EC2 instance)
the reason we do ssh ec2-user is because the amazon linux 2 AMI has already a user setup for us with name of ec2-user
give permission to the pem file chmod 004 filename.pem
connect to the ec2 instance server => ssh -i filename.pem ec2-user@publicIPOfInstance (could change)

windows:
we can run on powershell the same command if windows 10 already has ssh
when ssh into the ec2 instance - if you wanna run aws commands via aws configure
DO NOT enter your own credentials such as aws access key and secret key
instead - use IAM role - attach an IAM role to your ec2 instance that has a permission
and that way the IAM role provides credentials to the ec2 and by that credentials you can run commands whitout you providing your access key

ec2 instances purchasing options:
1. on demand instances - short workload, predictable pricing, pay by the second
2. reserved instances
* reserved instances for example 1 && 3 years - long work loads for example if you wanna runa  DB for a long time then reserved instance is great
* convertible reserved instances - flexible instance type for example, you want to change the instance type overtime
3. savings plan - 1 && 3 year commitment to an amount of usage, long workloads - instead of committing to a specific instance type
you commit to a specific amount of usage in dollars for long workloads
4. spot instances - short workloads, cheap, you can lose these instances at any time (less reliable)
5. dedicated hosts - book an entire physical server, control instance placement - meaning no other customers will share your hardware
6. capacity reservations - reserve capacity in a specific AZ for a specific duration

ec2 on demand:
pay for what you use => linux or windows - billing per second, after the first minute
all other OS systems - billing is per hour
it has the highest cost but no upfront payment
no long term commitment
recommended for short-term and un-interrupted workloads, where you can't predict how the application will behave

reserved instances:
up to 72% discount compared to on-demand
you reserve a specific instance attribute (instance type, region, tenancy and OS)
reservation period - 1 year + discount or 3 three years +++ discount
payment options => no upfront (+ discount), partial upfront ++ discount, all upfront +++ discount
reserved instance scope - regional or zonal (reserve capacity in an AZ)
recommended for steady state usage applications (think database)
you can buy and sell in the reserved instance marketplace

convertible reserved instances:
can change the ec2 type, family, OS, scope and tenancy
up to 66% discounts

EC2 savings plan:
get a discount based on long term usage up to 72% discount which is the same as reserved instances
commit to a certain type of usage (10$/hour for 1 or 3 years)
usage beyond EC2 savings plan is billed at the on demand price
locked to a specific instance family and AWS region e.g. M5 in us-east-1
but flexible across:
    * instance size (e.g. m5.xlrage, m5.2xlarge)
    * OS (e.g., Linux Windows)

spot instances:
can get a discount of up to 90% compared to on demand
but they are instances that you can "lose" at any point if you max price is less than the current spot price
because you define a max price your willing to pay for your spot instances
and if the spot price goes over it then your going to lose the instance
the most cost-efficient instances in AWS
useful for workloads that are resilient to failure such as
 * batch jobs
 * data analysis
 * image processing
 * any distributed workloads
 * workloads with a flexible start and end time
** not suitable for critical jobs or databases

dedicated hosts:
you get an actual physical server with EC2 instance capacity fully dedicated to your use
allow you address compliance requirements and use your existing server-bound software licenses
 that has billing based on => (per socket, per core, per VM software licenses
* purchasing options for dedicated hosts
    * on demand - pay per second for active dedicated host
    * reserved - 1 or 3 years (no upfront, partial upfront, all upfront)
The most expensive option in AWS because you actually reserve a physical server
useful for software that have complicated licensing model (BYOL - bring your own license)
Or for companies that have strong regulatory or compliance needs

dedicated instances:
instances run on hardware that's dedicated to you
which is different from the physical server
may share hardware with other instances in same account
no control over instance placement ( can move hardware after stop / start )

remember that dedicated instances mean that you have your own instance on your own hardware
and dedicated hosts means you get access to the physical server itself and it gives you visibility into the lower level hardware.

capacity reservations:
rserve on demand instances capacity in a specific Availability Zone for any duration
this means you can reserve on demand instances in a specific AZ for any duration
you have access to ec2 capacity when you need it
no time commitment, create cancel anytime no billing discounts - the only purpose is to reserve capacity
combine with regional reserved instances and savings plans to benefit from billing discounts
your charged at on demand rate whether you run instances or not
recommended for short-term and un-interrupted workloads that needs to be in a specific Availability Zone

**make sure to view the slides for the resort examples

shared responsibility model for EC2:

AWS responsibility:
infra - global network security
isolation on physical hosts
replacing faulty hardware
compliance validation with regulations that they have agreed on

user responsibility:
security in the cloud
security group rules - allows you or other people to access or not your EC2 instances
you own the entire VM inside the EC2 instance such as OS systems patches and updates you have to do them
aws gives you the VM and it's up to you to handle it the way you want
user is responsible for software and utils are installed on the ec2 instance - understanding how to assign IAM roles
and make sure permissions are correct
IAM roles assigned to EC2 && IAM user access management
make sure data is secure on your instance

EC2 AMI (OS)